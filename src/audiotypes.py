from asyncio.windows_events import NULL
import json
from abc import ABC, abstractmethod
import re
from mutagen.oggopus import OggOpus
from mutagen.mp4 import MP4
from datetime import datetime


#TODO add all original metadata to description and comment metadata fields
#TODO Reorganize imports

def createFileObject(fileLocation, JSONDictionary):
    if fileLocation.endswith(".opus"):
        return OGGFile(fileLocation, JSONDictionary)
    elif fileLocation.endswith(".m4a") or fileLocation.endswith(".mp4"):
        return MP4File(fileLocation, JSONDictionary)
    else:
        return None



class SongFile(ABC):
    def __init__(self, fileLocation, JSONDictionary):
        self.fileLocation = fileLocation # string
        self.originalTitle = ""
        self.originalUploader = ""
        self.originalAlbum = ""
        self.originalUploadDate = ""
        self.originalComment = ""
        self.originalDescription = ""
        self.originalURL = ""
        self.songTitle = ""
        self.songArtist = ""
        self.songAlbum = ""
        self.songDate = ""
        self.serializationComment = ""
        self.metadataFieldMatches = JSONDictionary["metadataFieldMatches"]
        self.artistNameTranslations = JSONDictionary["artistNameTranslations"]
        self.initializeFileFields()

    @abstractmethod
    def initializeFileFields(self):
        pass

    @abstractmethod
    def setMetadataField(self, field, value):
        pass

    @abstractmethod
    def setMetadataTitle(self, value):
        pass

    @abstractmethod
    def setMetadataArtist(self, value):
        pass

    @abstractmethod
    def setMetadataAlbum(self, value):
        pass

    @abstractmethod
    def setMetadataDate(self, value):
        pass

    @abstractmethod
    def setMetadataDescription(self, value):
        pass

    @abstractmethod
    def setMetadataComment(self, value):
        pass

    def getMetadataField(self, field):
        try:
            return self.file[field][0]
        except:
            return ""


    #TODO test if the setting of the data variable works with only one or the other fields in the metadata
    def findUpdateSongInformation(self):
        data = self.getOriginalComment() if self.getOriginalComment() != "" else self.getOriginalDescription()
        if data != "":
            print("Made it with data")
            
            if self.findDescriptionValue(data, ["Auto-generated by YouTube."]) != "":
                songValues = self.parseAutoGeneratedDescription(data)
                self.setSerializationComment("(Youtube) Parsed data from Auto-Generated YouTube video.")
            else:
                songValues = self.parseManMadeDescription(data)
                self.setSerializationComment("(Human)Parsed data from Human-Generated YouTube video.")

            self.setSongTitle(songValues["title"])
            self.setMetadataTitle(songValues["title"])
            
            self.setSongArtist(songValues["artist"])
            self.setMetadataArtist(songValues["artist"])

            self.setSongAlbum(songValues["album"])
            self.setMetadataAlbum(songValues["album"])

            self.setSongDate(songValues["date"])
            self.setMetadataDate(songValues["date"])
            
        else:
            print("NO data found")
        
        data += "\nOriginal Video Data:"
        data += "\nFile Name: " + self.getFileLocation()
        data += "\nVideo Title: " + self.getOriginalTitle()
        data += "\nVideo Uploader: " + self.getOriginalUploader()
        data += "\nVideo Album: " + self.getOriginalAlbum()
        data += "\nVideo Upload Date: " + self.getOriginalUploadDate()
        data += "\nVideo URL: " + self.getOriginalURL()
        data += "\nDate Parsed: " + datetime.today().strftime('%Y-%m-%d')
        data += "\nNote: " + self.getSerializationComment()
        
        self.setMetadataComment(data)
        self.setMetadataDescription(data)

        #TODO self.artistNameTranslations

        
    def parseAutoGeneratedDescription(self, descriptionText):
        songValues = {
            "title": "",
            "artist": "",
            "album": "",
            "date": ""
        }
        songValues["title"] =  descriptionText.split("\n")[2].split(" · ")[0]
        songValues["artist"] = descriptionText.split("\n")[2].split(" · ")[1]
        songValues["album"] = descriptionText.split("\n")[4]
        songValues["date"] = self.findSongDate(descriptionText)

        return songValues

    #self.metadataFieldMatches
    def parseManMadeDescription(self, descriptionText):
        songValues = {
            "title": "",
            "artist": "",
            "album": "",
            "date": ""
        }
        songValues["title"] =  self.findDescriptionValue(descriptionText, self.metadataFieldMatches["title"])
        songValues["artist"] = self.findDescriptionValue(descriptionText, self.metadataFieldMatches["artist"])
        songValues["album"] = self.findDescriptionValue(descriptionText, self.metadataFieldMatches["album"])
        songValues["date"] = self.findSongDate(descriptionText)

        return songValues

    def findDescriptionValue(self, descriptionText, keyArray):
        foundValue = ""
        for key in keyArray:
            for line in descriptionText.split("\n"):
                if line.find(key) != -1:
                    for delimiter in self.metadataFieldMatches["delimiters"]:
                        splitLine = line.split(delimiter)
                        if len(splitLine) > 1:
                            splitLine.pop(0)
                            for i in range(len(splitLine) - 1):
                                foundValue += splitLine[i] + delimiter
                            foundValue += splitLine[-1]
                            foundValue = foundValue.strip() #Remove leading and trailing whitespace
                            #Parsed value based on delimiter, return everything after first delimiter
                            return foundValue
                    #Couldn't find any delimiters, return whole matched line unchanged
                    foundValue = line
                    return foundValue
        #Found nothing, return empty string
        return foundValue

    def findSongDate(self, text):
        match = re.search(r"20{1}\d{2}", text)
        if match:
            return match.group()
        else:
            return ""

    def getAllFileMetadata(self):
        return self.file.pprint()

    def saveFileMetadata(self):
        self.file.save()
    
    def serializeToDictionary(self):
        updatedValues = {
            "title": self.getSongTitle(),
            "artist": self.getSongArtist(),
            "album": self.getSongAlbum(),
            "date": self.getSongDate()
        }
        successStatus = {"summary": ""}
        for key, value in updatedValues.items():
            if value == "":
                successStatus[key] = "Not Found"
            else:
                successStatus[key] = "Found"
        
        foundFlag = False
        notFoundFlag = False
        for key, value in successStatus.items():
            if value == "Found":
                foundFlag = True
            elif value == "Not Found":
                notFoundFlag = True
        if foundFlag and notFoundFlag:
            successStatus["summary"] = "partial"
        elif foundFlag and not notFoundFlag:
            successStatus["summary"] = "complete"
        else:
            successStatus["summary"] = "incomplete"

        return {
            "originalFilename": self.getFileLocation(),
            "originalValues": {
                "title": self.getOriginalTitle(),
                "uploader": self.getOriginalUploader(),
                "album": self.getOriginalAlbum(),
                "uploadDate": self.getOriginalUploadDate(),
                "URL": self.getOriginalURL()
            },
            "updatedValues": updatedValues,
            "successStatus": successStatus,
            "comment": self.getSerializationComment()
        }

    def getFileLocation(self):
        return self.fileLocation

    def getOriginalTitle(self):
        return self.originalTitle
    def getOriginalUploader(self):
        return self.originalUploader
    def getOriginalAlbum(self):
        return self.originalAlbum
    def getOriginalUploadDate(self):
        return self.originalUploadDate
    def getOriginalComment(self):
        return self.originalComment
    def getOriginalDescription(self):
        return self.originalDescription
    def getOriginalURL(self):
        return self.originalURL

    def getSongTitle(self):
        return self.songTitle
    def setSongTitle(self, value):
        self.songTitle = value
    def getSongArtist(self):
        return self.songArtist
    def setSongArtist(self, value):
        self.songArtist = value
    def getSongAlbum(self):
        return self.songAlbum
    def setSongAlbum(self, value):
        self.songAlbum = value
    def getSongDate(self):
        return self.songDate
    def setSongDate(self, value):
        self.songDate = value

    def getSerializationComment(self):
        return self.serializationComment
    def setSerializationComment(self, value):
        self.serializationComment = value

    



class OGGFile(SongFile):
    def __init__(self, fileLocation, JSONDictionary):
        self.file = OggOpus(fileLocation)
        super().__init__(fileLocation, JSONDictionary)

    def initializeFileFields(self):
        self.originalTitle = self.getMetadataField("title")
        self.originalUploader = self.getMetadataField("artist")
        self.originalAlbum = self.getMetadataField("album")
        self.originalUploadDate = self.getMetadataField("date")
        self.originalComment = self.getMetadataField("comment")
        self.originalDescription = self.getMetadataField("description")
        self.originalURL = self.getMetadataField("purl")


    def setMetadataField(self, field, value):
        self.file[field] = value

    def setMetadataTitle(self, value):
        self.file["title"] = value

    def setMetadataArtist(self, value):
        self.file["artist"] = value

    def setMetadataAlbum(self, value):
        self.file["album"] = value

    def setMetadataDate(self, value):
        self.file["date"] = value

    def setMetadataDescription(self, value):
        self.file["description"] = value

    def setMetadataComment(self, value):
        self.file["comment"] = value


class MP4File(SongFile):
    def __init__(self, fileLocation, JSONDictionary):
        self.file = MP4(fileLocation)
        super().__init__(fileLocation, JSONDictionary)

    def initializeFileFields(self):
        self.originalTitle = self.getMetadataField("\xa9nam")
        self.originalUploader = self.getMetadataField("\xa9ART")
        self.originalAlbum = self.getMetadataField("\xa9alb")
        self.originalUploadDate = self.getMetadataField("\xa9day")
        self.originalComment = self.getMetadataField("\xa9cmt")
        self.originalDescription = self.getMetadataField("desc")
        self.originalURL = self.getMetadataField("purl")

    def setMetadataField(self, field, value):
        self.file[field] = value

    def setMetadataTitle(self, value):
        self.file["\xa9nam"] = value

    def setMetadataArtist(self, value):
        self.file["\xa9ART"] = value

    def setMetadataAlbum(self, value):
        self.file["\xa9alb"] = value

    def setMetadataDate(self, value):
        self.file["\xa9day"] = value

    def setMetadataDescription(self, value):
        self.file["desc"] = value

    def setMetadataComment(self, value):
        self.file["\xa9cmt"] = value